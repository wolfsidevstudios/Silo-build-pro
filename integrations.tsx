import React from 'react';
import { YouTubeIcon, OpenAIIcon, SpotifyIcon, StripeIcon, GitHubIcon, PayPalIcon, PinterestIcon, ProductHuntIcon, TwilioIcon, DiscordIcon, XIcon, SendGridIcon, OpenWeatherIcon, PexelsIcon, UnsplashIcon, NotionIcon, AirtableIcon, ShopifyIcon, GiphyIcon, GoogleAnalyticsIcon, GoogleGmailIcon, GoogleCalendarIcon, GooglePayIcon, GoogleAdsenseIcon, GoogleGeminiIcon, AppleSignInIcon, AppleMapKitIcon, AppleMusicIcon, AppleICloudIcon, JasperIcon, RunwayIcon, UberIcon, TikTokIcon, VenmoIcon, RedditIcon, SoundCloudIcon, KofiIcon, RssIcon, CloudflareIcon, GoogleMapsIcon } from './components/icons';

export interface Integration {
    id: string;
    name: string;
    icon: React.ReactNode;
    description: string;
    storageKey?: string;
    keys?: { name: string; label: string }[];
    usageInstructions?: string;
    category?: string;
    prompt?: string;
    getApiKeyUrl?: string;
}

export const BROWSER_API_DEFINITIONS: Integration[] = [
    {
        id: 'geolocation',
        name: 'Geolocation API',
        icon: <span className="material-symbols-outlined text-4xl text-blue-500">location_on</span>,
        description: "Access the user's location for location-aware features.",
        prompt: "Build an app that asks for location permission and then displays the user's current latitude and longitude.",
        category: 'Browser APIs'
    },
    {
        id: 'camera',
        name: 'Camera (getUserMedia)',
        icon: <span className="material-symbols-outlined text-4xl text-red-500">photo_camera</span>,
        description: 'Capture video and images directly from the device camera.',
        prompt: 'Create a photobooth app. Show the live camera feed on the page and include a button to capture a photo and display it below the feed.',
        category: 'Browser APIs'
    },
    {
        id: 'speech-recognition',
        name: 'Speech Recognition',
        icon: <span className="material-symbols-outlined text-4xl text-purple-500">mic</span>,
        description: 'Transcribe spoken words into text using the Web Speech API.',
        prompt: 'Build a voice note app. It should have a "Start Listening" button that transcribes speech to text in a text area, and a "Stop Listening" button.',
        category: 'Browser APIs'
    },
    {
        id: 'speech-synthesis',
        name: 'Speech Synthesis',
        icon: <span className="material-symbols-outlined text-4xl text-green-500">volume_up</span>,
        description: 'Convert text into spoken voice with the Web Speech API.',
        prompt: 'Create a text-to-speech app with a textarea and a "Speak" button. When the button is clicked, the app should read the text from the textarea aloud.',
        category: 'Browser APIs'
    },
    {
        id: 'fullscreen',
        name: 'Fullscreen API',
        icon: <span className="material-symbols-outlined text-4xl text-gray-700">fullscreen</span>,
        description: 'Allow users to view a specific element in fullscreen mode.',
        prompt: "Build a simple image viewer with an 'Enter Fullscreen' button. When clicked, the image should take up the entire screen.",
        category: 'Browser APIs'
    },
    {
        id: 'clipboard',
        name: 'Clipboard API',
        icon: <span className="material-symbols-outlined text-4xl text-yellow-600">content_paste</span>,
        description: 'Securely copy text and other data to the user clipboard.',
        prompt: 'Create a component with a text input and a "Copy" button. When the button is clicked, the text from the input should be copied to the clipboard.',
        category: 'Browser APIs'
    },
    {
        id: 'web-share',
        name: 'Web Share API',
        icon: <span className="material-symbols-outlined text-4xl text-indigo-500">share</span>,
        description: 'Enable native sharing capabilities on supported devices.',
        prompt: 'Create a simple article page with a title, some text, and a "Share" button. Clicking the button should open the native device sharing UI.',
        category: 'Browser APIs'
    },
    {
        id: 'vibration',
        name: 'Vibration API',
        icon: <span className="material-symbols-outlined text-4xl text-teal-500">vibration</span>,
        description: 'Provide physical feedback through device vibration (mobile only).',
        prompt: 'Build a set of buttons that trigger different vibration patterns when clicked: a short buzz, a long buzz, and a "mario" sequence.',
        category: 'Browser APIs'
    }
];

export const INTEGRATION_DEFINITIONS: Integration[] = [
    {
        id: 'openai',
        name: 'OpenAI',
        icon: <span className="material-symbols-outlined text-4xl">smart_toy</span>,
        description: 'Integrate GPT models for text generation, completion, and more.',
        storageKey: 'silo_integration_openai',
        keys: [{ name: 'apiKey', label: 'OpenAI API Key' }],
        usageInstructions: 'Use the OpenAI API with your API Key `{{apiKey}}` to make requests to models like GPT-4.',
        category: 'AI & Developer Tools',
        getApiKeyUrl: 'https://platform.openai.com/api-keys',
    },
    {
        id: 'hugging-face',
        name: 'Hugging Face',
        icon: <span className="material-symbols-outlined text-4xl">psychology</span>,
        description: 'Access thousands of pre-trained models for various ML tasks.',
        storageKey: 'silo_integration_huggingface',
        keys: [{ name: 'apiKey', label: 'Hugging Face API Key' }],
        usageInstructions: 'Make API calls to Hugging Face models using your API key `{{apiKey}}`.',
        category: 'AI & Developer Tools',
        getApiKeyUrl: 'https://huggingface.co/settings/tokens',
    },
    {
        id: 'replicate',
        name: 'Replicate',
        icon: <span className="material-symbols-outlined text-4xl">model_training</span>,
        description: 'Run open-source machine learning models with a cloud API.',
        storageKey: 'silo_integration_replicate',
        keys: [{ name: 'apiKey', label: 'Replicate API Token' }],
        usageInstructions: 'Use the Replicate API with your token `{{apiKey}}` to run models.',
        category: 'AI & Developer Tools',
        getApiKeyUrl: 'https://replicate.com/account/api-tokens',
    },
    {
        id: 'anthropic',
        name: 'Anthropic',
        icon: <span className="material-symbols-outlined text-4xl">neurology</span>,
        description: 'Integrate Claude models for powerful text and conversation generation.',
        storageKey: 'silo_integration_anthropic',
        keys: [{ name: 'apiKey', label: 'Anthropic API Key' }],
        usageInstructions: 'Use the Anthropic API with your API key `{{apiKey}}` to interact with Claude.',
        category: 'AI & Developer Tools',
        getApiKeyUrl: 'https://console.anthropic.com/account/keys',
    },
    {
        id: 'cohere',
        name: 'Cohere',
        icon: <span className="material-symbols-outlined text-4xl">text_fields</span>,
        description: 'Access large language models for text generation and classification.',
        storageKey: 'silo_integration_cohere',
        keys: [{ name: 'apiKey', label: 'Cohere API Key' }],
        usageInstructions: 'Use the Cohere API with your key `{{apiKey}}` for language tasks.',
        category: 'AI & Developer Tools',
        getApiKeyUrl: 'https://dashboard.cohere.com/api-keys',
    },
    {
        id: 'langchain',
        name: 'LangChain',
        icon: <span className="material-symbols-outlined text-4xl">link</span>,
        description: 'Build context-aware, reasoning applications with language models.',
        category: 'AI & Developer Tools',
        prompt: 'Build a simple Q&A app using LangChain to answer questions about a provided text document.',
    },
    {
        id: 'vercel-ai-sdk',
        name: 'Vercel AI SDK',
        icon: <span className="material-symbols-outlined text-4xl">bolt</span>,
        description: 'An open-source library for building AI-powered user interfaces.',
        category: 'AI & Developer Tools',
        prompt: 'Create a chat application using the Vercel AI SDK to stream responses from an AI model.',
    },
    {
        id: 'firebase',
        name: 'Firebase',
        icon: <span className="material-symbols-outlined text-4xl">local_fire_department</span>,
        description: 'Build apps fast with a backend platform from Google.',
        storageKey: 'silo_integration_firebase',
        keys: [
            { name: 'apiKey', label: 'API Key' },
            { name: 'authDomain', label: 'Auth Domain' },
            { name: 'projectId', label: 'Project ID' },
        ],
        usageInstructions: 'Initialize Firebase with the provided config: apiKey: `{{apiKey}}`, authDomain: `{{authDomain}}`, projectId: `{{projectId}}`.',
        category: 'Databases & Backend-as-a-Service',
        getApiKeyUrl: 'https://console.firebase.google.com/',
    },
    {
        id: 'aws-s3',
        name: 'AWS S3',
        icon: <span className="material-symbols-outlined text-4xl">cloud_upload</span>,
        description: 'Store and retrieve any amount of data from anywhere on the web.',
        storageKey: 'silo_integration_aws_s3',
        keys: [
            { name: 'accessKeyId', label: 'Access Key ID' },
            { name: 'secretAccessKey', label: 'Secret Access Key' },
            { name: 'bucketName', label: 'Bucket Name' },
            { name: 'region', label: 'Region' },
        ],
        usageInstructions: 'Use the AWS SDK for JavaScript to interact with your S3 bucket `{{bucketName}}` in region `{{region}}`.',
        category: 'Databases & Backend-as-a-Service',
    },
    {
        id: 'google-cloud-vision',
        name: 'Google Cloud Vision',
        icon: <span className="material-symbols-outlined text-4xl">image_search</span>,
        description: 'Derive insights from your images with AutoML Vision and the Vision API.',
        storageKey: 'silo_integration_gcp_vision',
        keys: [{ name: 'apiKey', label: 'Google Cloud API Key' }],
        usageInstructions: 'Make requests to the Google Cloud Vision API using your API key `{{apiKey}}`.',
        category: 'AI & Developer Tools',
    },
    // Payments
    {
        id: 'stripe',
        name: 'Stripe',
        icon: <span className="material-symbols-outlined text-4xl">credit_card</span>,
        description: 'Payment processing platform for e-commerce websites and mobile apps.',
        storageKey: 'silo_integration_stripe',
        keys: [{ name: 'publishableKey', label: 'Stripe Publishable Key' }],
        usageInstructions: 'Use Stripe.js and initialize it with your publishable key `{{publishableKey}}` to create payment elements.',
        category: 'Payments',
        getApiKeyUrl: 'https://dashboard.stripe.com/apikeys',
    },
    {
        id: 'paypal',
        name: 'PayPal',
        icon: <span className="material-symbols-outlined text-4xl">payments</span>,
        description: 'Online payments system that supports online money transfers.',
        storageKey: 'silo_integration_paypal',
        keys: [{ name: 'clientId', label: 'PayPal Client ID' }],
        usageInstructions: 'Use the PayPal JavaScript SDK and provide your client ID `{{clientId}}`.',
        category: 'Payments',
        getApiKeyUrl: 'https://developer.paypal.com/developer/applications/',
    },
    {
        id: 'braintree',
        name: 'Braintree',
        icon: <span className="material-symbols-outlined text-4xl">add_card</span>,
        description: 'A full-stack payments platform that makes it easy to accept payments.',
        storageKey: 'silo_integration_braintree',
        keys: [{ name: 'authorization', label: 'Client Authorization Token' }],
        usageInstructions: 'Use the Braintree web drop-in UI, initializing it with your client authorization token `{{authorization}}`.',
        category: 'Payments',
    },
    {
        id: 'square',
        name: 'Square',
        icon: <span className="material-symbols-outlined text-4xl">crop_square</span>,
        description: 'Payment processing and business management tools.',
        storageKey: 'silo_integration_square',
        keys: [
            { name: 'applicationId', label: 'Application ID' },
            { name: 'locationId', label: 'Location ID' },
        ],
        usageInstructions: 'Use the Square Web Payments SDK with your application ID `{{applicationId}}` and location ID `{{locationId}}`.',
        category: 'Payments',
    },
    {
        id: 'adyen',
        name: 'Adyen',
        icon: <span className="material-symbols-outlined text-4xl">paid</span>,
        description: 'A global payment company that allows businesses to accept e-commerce, mobile, and point-of-sale payments.',
        storageKey: 'silo_integration_adyen',
        keys: [{ name: 'clientKey', label: 'Client Key' }],
        usageInstructions: 'Use Adyen Drop-in, configuring it with your client key `{{clientKey}}`.',
        category: 'Payments',
    },
    // Communication
    {
        id: 'twilio',
        name: 'Twilio',
        icon: <span className="material-symbols-outlined text-4xl">sms</span>,
        description: 'Build communication features like SMS, voice, and video into your apps.',
        storageKey: 'silo_integration_twilio',
        keys: [
            { name: 'accountSid', label: 'Account SID' },
            { name: 'authToken', label: 'Auth Token' },
        ],
        usageInstructions: 'For frontend code, assume a backend API exists that uses the Twilio Account SID `{{accountSid}}` and Auth Token to send messages or make calls.',
        category: 'Communication',
    },
    {
        id: 'sendgrid',
        name: 'SendGrid',
        icon: <span className="material-symbols-outlined text-4xl">forward_to_inbox</span>,
        description: 'Email delivery service for sending marketing and transactional emails.',
        storageKey: 'silo_integration_sendgrid',
        keys: [{ name: 'apiKey', label: 'SendGrid API Key' }],
        usageInstructions: 'For frontend code, assume a backend API exists that uses the SendGrid API key `{{apiKey}}` to send emails.',
        category: 'Communication',
    },
    {
        id: 'mailchimp',
        name: 'Mailchimp',
        icon: <span className="material-symbols-outlined text-4xl">mark_email_unread</span>,
        description: 'Marketing automation platform and email marketing service.',
        storageKey: 'silo_integration_mailchimp',
        keys: [{ name: 'apiKey', label: 'Mailchimp API Key' }],
        usageInstructions: 'Use the Mailchimp API with your API Key `{{apiKey}}` to manage audiences and campaigns.',
        category: 'Communication',
    },
    {
        id: 'postmark',
        name: 'Postmark',
        icon: <span className="material-symbols-outlined text-4xl">mail</span>,
        description: 'Fast and reliable transactional email delivery service.',
        storageKey: 'silo_integration_postmark',
        keys: [{ name: 'serverToken', label: 'Server Token' }],
        usageInstructions: 'For frontend code, assume a backend API exists that uses the Postmark server token `{{serverToken}}` to send transactional emails.',
        category: 'Communication',
    },
    {
        id: 'mailgun',
        name: 'Mailgun',
        icon: <span className="material-symbols-outlined text-4xl">outgoing_mail</span>,
        description: 'Transactional email API service for developers.',
        storageKey: 'silo_integration_mailgun',
        keys: [{ name: 'apiKey', label: 'Mailgun API Key' }],
        usageInstructions: 'For frontend code, assume a backend API exists that uses the Mailgun API key `{{apiKey}}` to send emails.',
        category: 'Communication',
    },
    // Social & Content
    {
        id: 'x-twitter',
        name: 'X (Twitter)',
        icon: <span className="material-symbols-outlined text-4xl">chat_bubble</span>,
        description: 'Integrate tweets, user timelines, and social sharing.',
        storageKey: 'silo_integration_x',
        keys: [{ name: 'bearerToken', label: 'Bearer Token' }],
        usageInstructions: 'Use the X API v2 with your Bearer Token `{{bearerToken}}` to fetch public data.',
        category: 'Social & Content',
    },
    {
        id: 'discord',
        name: 'Discord',
        icon: <span className="material-symbols-outlined text-4xl">forum</span>,
        description: 'Integrate with Discord servers, channels, and user authentication.',
        storageKey: 'silo_integration_discord',
        keys: [{ name: 'clientId', label: 'Client ID' }],
        usageInstructions: 'Use Discord\'s OAuth2 for user authentication with your client ID `{{clientId}}`.',
        category: 'Social & Content',
    },
    {
        id: 'youtube',
        name: 'YouTube',
        icon: <span className="material-symbols-outlined text-4xl">play_circle</span>,
        description: 'Embed videos and access YouTube data like channels and playlists.',
        storageKey: 'silo_integration_youtube',
        keys: [{ name: 'apiKey', label: 'Google API Key' }],
        usageInstructions: 'Use the YouTube Data API v3 with your API key `{{apiKey}}` to search for videos or fetch playlist data.',
        category: 'Social & Content',
    },
    {
        id: 'giphy',
        name: 'Giphy',
        icon: <span className="material-symbols-outlined text-4xl">gif</span>,
        description: 'Integrate animated GIFs from the Giphy library.',
        storageKey: 'silo_integration_giphy',
        keys: [{ name: 'apiKey', label: 'Giphy API Key' }],
        usageInstructions: 'Use the Giphy API with your key `{{apiKey}}` to search for and display GIFs.',
        category: 'Social & Content',
    },
    {
        id: 'unsplash',
        name: 'Unsplash',
        icon: <span className="material-symbols-outlined text-4xl">photo_library</span>,
        description: 'Access a large library of high-resolution, free-to-use photos.',
        storageKey: 'silo_integration_unsplash',
        keys: [{ name: 'accessKey', label: 'Access Key' }],
        usageInstructions: 'Use the Unsplash API with your access key `{{accessKey}}` to search for and display images.',
        category: 'Social & Content',
    },
    {
        id: 'pexels',
        name: 'Pexels',
        icon: <span className="material-symbols-outlined text-4xl">image</span>,
        description: 'Access free stock photos and videos.',
        storageKey: 'silo_integration_pexels',
        keys: [{ name: 'apiKey', label: 'Pexels API Key' }],
        usageInstructions: 'Use the Pexels API with your API key `{{apiKey}}` to search for photos and videos.',
        category: 'Social & Content',
    },
    {
        id: 'reddit',
        name: 'Reddit',
        icon: <span className="material-symbols-outlined text-4xl">sms_failed</span>,
        description: 'Integrate content from Reddit, including posts and comments.',
        storageKey: 'silo_integration_reddit',
        keys: [{ name: 'clientId', label: 'Client ID' }],
        usageInstructions: 'Use the Reddit JSON API. For public content, no complex authentication is needed. For user-specific actions, use OAuth with client ID `{{clientId}}`.',
        category: 'Social & Content',
    },
    {
        id: 'tiktok',
        name: 'TikTok',
        icon: <span className="material-symbols-outlined text-4xl">music_video</span>,
        description: 'Embed TikTok videos and access user data.',
        storageKey: 'silo_integration_tiktok',
        keys: [{ name: 'clientKey', label: 'Client Key' }],
        usageInstructions: 'Use the TikTok for Developers API with your client key `{{clientKey}}`.',
        category: 'Social & Content',
    },
    // Data & Analytics
    {
        id: 'google-analytics',
        name: 'Google Analytics',
        icon: <span className="material-symbols-outlined text-4xl">monitoring</span>,
        description: 'Track website traffic and user behavior.',
        storageKey: 'silo_integration_ga',
        keys: [{ name: 'measurementId', label: 'Measurement ID (G-)' }],
        usageInstructions: 'Integrate the Google Analytics gtag.js snippet using your measurement ID `{{measurementId}}`.',
        category: 'Data & Analytics',
    },
    {
        id: 'mixpanel',
        name: 'Mixpanel',
        icon: <span className="material-symbols-outlined text-4xl">analytics</span>,
        description: 'Product analytics for tracking user interactions.',
        storageKey: 'silo_integration_mixpanel',
        keys: [{ name: 'projectToken', label: 'Project Token' }],
        usageInstructions: 'Initialize the Mixpanel library with your project token `{{projectToken}}` and use it to track events.',
        category: 'Data & Analytics',
    },
    {
        id: 'segment',
        name: 'Segment',
        icon: <span className="material-symbols-outlined text-4xl">hub</span>,
        description: 'Collect, clean, and control your customer data.',
        storageKey: 'silo_integration_segment',
        keys: [{ name: 'writeKey', label: 'Write Key' }],
        usageInstructions: 'Initialize Segment\'s Analytics.js 2.0 with your write key `{{writeKey}}`.',
        category: 'Data & Analytics',
    },
    {
        id: 'amplitude',
        name: 'Amplitude',
        icon: <span className="material-symbols-outlined text-4xl">insights</span>,
        description: 'Product intelligence platform to understand user behavior.',
        storageKey: 'silo_integration_amplitude',
        keys: [{ name: 'apiKey', label: 'API Key' }],
        usageInstructions: 'Initialize the Amplitude Browser SDK with your API key `{{apiKey}}`.',
        category: 'Data & Analytics',
    },
    // Maps & Geolocation
    {
        id: 'google-maps',
        name: 'Google Maps',
        icon: <span className="material-symbols-outlined text-4xl">map</span>,
        description: 'Embed maps and use various mapping services.',
        storageKey: 'silo_integration_google_maps',
        keys: [{ name: 'apiKey', label: 'Google Maps API Key' }],
        usageInstructions: 'Use the Google Maps JavaScript API, including your API key `{{apiKey}}` in the script URL.',
        category: 'Maps & Geolocation',
    },
    {
        id: 'mapbox',
        name: 'Mapbox',
        icon: <span className="material-symbols-outlined text-4xl">satellite_alt</span>,
        description: 'Custom online maps for websites and applications.',
        storageKey: 'silo_integration_mapbox',
        keys: [{ name: 'accessToken', label: 'Public Access Token' }],
        usageInstructions: 'Use Mapbox GL JS and provide your access token `{{accessToken}}` during map initialization.',
        category: 'Maps & Geolocation',
    },
    // Productivity & Business
    {
        id: 'notion',
        name: 'Notion',
        icon: <span className="material-symbols-outlined text-4xl">article</span>,
        description: 'Integrate with Notion pages, databases, and users.',
        storageKey: 'silo_integration_notion',
        keys: [{ name: 'apiToken', label: 'Internal Integration Token' }],
        usageInstructions: 'For frontend code, assume a backend API exists that uses the Notion API with your integration token `{{apiToken}}`.',
        category: 'Productivity & Business',
    },
    {
        id: 'airtable',
        name: 'Airtable',
        icon: <span className="material-symbols-outlined text-4xl">grid_on</span>,
        description: 'Spreadsheet-database hybrid, with the features of a database but applied to a spreadsheet.',
        storageKey: 'silo_integration_airtable',
        keys: [
            { name: 'apiKey', label: 'API Key' },
            { name: 'baseId', label: 'Base ID' },
        ],
        usageInstructions: 'Use the Airtable API with your API key `{{apiKey}}` to access your base `{{baseId}}`.',
        category: 'Productivity & Business',
    },
    {
        id: 'slack',
        name: 'Slack',
        icon: <span className="material-symbols-outlined text-4xl">chat</span>,
        description: 'Send messages to Slack channels and users.',
        storageKey: 'silo_integration_slack',
        keys: [{ name: 'botToken', label: 'Bot User OAuth Token' }],
        usageInstructions: 'For frontend code, assume a backend API exists that uses the Slack API with your bot token `{{botToken}}`.',
        category: 'Productivity & Business',
    },
    {
        id: 'trello',
        name: 'Trello',
        icon: <span className="material-symbols-outlined text-4xl">view_kanban</span>,
        description: 'Web-based Kanban-style list-making application.',
        storageKey: 'silo_integration_trello',
        keys: [
            { name: 'apiKey', label: 'API Key' },
            { name: 'token', label: 'User Token' },
        ],
        usageInstructions: 'Use the Trello API with your key `{{apiKey}}` and token `{{token}}` to manage boards and cards.',
        category: 'Productivity & Business',
    },
    {
        id: 'asana',
        name: 'Asana',
        icon: <span className="material-symbols-outlined text-4xl">task_alt</span>,
        description: 'Work management platform teams use to stay focused on the goals, projects, and daily tasks.',
        storageKey: 'silo_integration_asana',
        keys: [{ name: 'personalAccessToken', label: 'Personal Access Token' }],
        usageInstructions: 'For frontend code, assume a backend API exists that uses the Asana API with your Personal Access Token `{{personalAccessToken}}`.',
        category: 'Productivity & Business',
    },
    {
        id: 'jira',
        name: 'Jira',
        icon: <span className="material-symbols-outlined text-4xl">assignment</span>,
        description: 'Issue tracking product developed by Atlassian.',
        storageKey: 'silo_integration_jira',
        keys: [
            { name: 'apiToken', label: 'API Token' },
            { name: 'email', label: 'Your Email' },
            { name: 'domain', label: 'Jira Domain (e.g., your-company.atlassian.net)' },
        ],
        usageInstructions: 'For frontend code, assume a backend API exists that makes requests to `{{domain}}` using your email and API token for authentication.',
        category: 'Productivity & Business',
    },
    // E-commerce
    {
        id: 'shopify',
        name: 'Shopify',
        icon: <span className="material-symbols-outlined text-4xl">storefront</span>,
        description: 'E-commerce platform for online stores and retail point-of-sale systems.',
        storageKey: 'silo_integration_shopify',
        keys: [
            { name: 'storefrontAccessToken', label: 'Storefront Access Token' },
            { name: 'domain', label: 'Store Domain (e.g., your-store.myshopify.com)' },
        ],
        usageInstructions: 'Use the Shopify Storefront API with your domain `{{domain}}` and access token `{{storefrontAccessToken}}`.',
        category: 'E-commerce',
    },
    {
        id: 'bigcommerce',
        name: 'BigCommerce',
        icon: <span className="material-symbols-outlined text-4xl">shopping_cart</span>,
        description: 'E-commerce platform for businesses of all sizes.',
        storageKey: 'silo_integration_bigcommerce',
        keys: [
            { name: 'storeHash', label: 'Store Hash' },
            { name: 'accessToken', label: 'Access Token' },
        ],
        usageInstructions: 'Use the BigCommerce API with your store hash `{{storeHash}}` and access token `{{accessToken}}`.',
        category: 'E-commerce',
    },
    // Cloud & Hosting
    {
        id: 'cloudflare',
        name: 'Cloudflare',
        icon: <span className="material-symbols-outlined text-4xl">cloud</span>,
        description: 'Web infrastructure and website security company.',
        storageKey: 'silo_integration_cloudflare',
        keys: [{ name: 'apiToken', label: 'API Token' }],
        usageInstructions: 'For frontend code, assume a backend API exists that uses the Cloudflare API with your token `{{apiToken}}` to manage resources.',
        category: 'Cloud & Hosting',
    },
    {
        id: 'netlify-api',
        name: 'Netlify API',
        icon: <span className="material-symbols-outlined text-4xl">cloud_sync</span>,
        description: 'Programmatically manage your Netlify sites, deploys, and domains.',
        storageKey: 'silo_integration_netlify_api',
        keys: [{ name: 'personalAccessToken', label: 'Personal Access Token' }],
        usageInstructions: 'For frontend code, assume a backend API exists that uses the Netlify API with your token `{{personalAccessToken}}`.',
        category: 'Cloud & Hosting',
    },
    // Music & Audio
    {
        id: 'spotify',
        name: 'Spotify',
        icon: <span className="material-symbols-outlined text-4xl">music_note</span>,
        description: 'Digital music, podcast, and video service.',
        storageKey: 'silo_integration_spotify',
        keys: [{ name: 'clientId', label: 'Client ID' }],
        usageInstructions: 'Use the Spotify Web API. For public data, use a client credentials flow. For user data, use OAuth with your client ID `{{clientId}}`.',
        category: 'Music & Audio',
    },
    {
        id: 'soundcloud',
        name: 'SoundCloud',
        icon: <span className="material-symbols-outlined text-4xl">cloudy</span>,
        description: 'Online audio distribution platform and music sharing website.',
        storageKey: 'silo_integration_soundcloud',
        keys: [{ name: 'clientId', label: 'Client ID' }],
        usageInstructions: 'Use the SoundCloud API with your client ID `{{clientId}}` to access public tracks and playlists.',
        category: 'Music & Audio',
    },
    // Finance
    {
        id: 'plaid',
        name: 'Plaid',
        icon: <span className="material-symbols-outlined text-4xl">account_balance</span>,
        description: 'Connect your app to users\' bank accounts.',
        storageKey: 'silo_integration_plaid',
        keys: [{ name: 'client_id', label: 'Client ID' }],
        usageInstructions: 'Use Plaid Link on the frontend. This requires a `link_token` generated by a backend. Assume the backend has the Plaid client ID `{{client_id}}`.',
        category: 'Finance',
    },
    {
        id: 'finnhub',
        name: 'Finnhub',
        icon: <span className="material-symbols-outlined text-4xl">candlestick_chart</span>,
        description: 'Real-time stock, forex, and crypto data.',
        storageKey: 'silo_integration_finnhub',
        keys: [{ name: 'apiKey', label: 'API Key' }],
        usageInstructions: 'Use the Finnhub API with your API key `{{apiKey}}` to fetch market data.',
        category: 'Finance',
    },
    // Authentication
    {
        id: 'auth0',
        name: 'Auth0',
        icon: <span className="material-symbols-outlined text-4xl">shield_person</span>,
        description: 'Identity management platform for web, mobile, IoT, and internal applications.',
        storageKey: 'silo_integration_auth0',
        keys: [
            { name: 'domain', label: 'Domain' },
            { name: 'clientId', label: 'Client ID' },
        ],
        usageInstructions: 'Use the Auth0 SPA SDK, initializing it with your domain `{{domain}}` and client ID `{{clientId}}`.',
        category: 'Authentication',
    },
    {
        id: 'okta',
        name: 'Okta',
        icon: <span className="material-symbols-outlined text-4xl">lock_person</span>,
        description: 'Identity and access management company.',
        storageKey: 'silo_integration_okta',
        keys: [
            { name: 'issuer', label: 'Issuer URL' },
            { name: 'clientId', label: 'Client ID' },
        ],
        usageInstructions: 'Use the Okta Sign-In Widget or an Okta SDK, configured with your issuer URL `{{issuer}}` and client ID `{{clientId}}`.',
        category: 'Authentication',
    },
    {
        id: 'neon',
        name: 'Neon',
        icon: <span className="material-symbols-outlined text-4xl text-cyan-500">database</span>,
        description: 'Connect to a serverless, scalable PostgreSQL database from Neon.',
        storageKey: 'silo_integration_neon',
        keys: [{ name: 'connectionString', label: 'Neon Connection String' }],
        usageInstructions: 'The application is connected to a Neon serverless Postgres database. The connection string is `{{connectionString}}`. For frontend code, assume a backend API exists that uses this connection string to connect to the database. Make `fetch` requests to hypothetical API endpoints corresponding to the SQL schema (e.g., `/api/users`).',
        category: 'Databases & Backend-as-a-Service',
        getApiKeyUrl: 'https://neon.tech/docs/connect/connect-from-any-app#find-your-connection-string',
    },
    {
        id: 'postgresql',
        name: 'PostgreSQL',
        icon: <span className="w-full h-full flex items-center justify-center text-3xl font-bold text-blue-600 bg-gray-100 rounded-lg">Pg</span>,
        description: 'Connect to any standard PostgreSQL database.',
        storageKey: 'silo_integration_postgresql',
        keys: [{ name: 'connectionString', label: 'PostgreSQL Connection String' }],
        usageInstructions: 'The application is connected to a PostgreSQL database. The connection string is `{{connectionString}}`. For frontend code, assume a backend API exists that uses this connection string to connect to the database. Make `fetch` requests to hypothetical API endpoints corresponding to the SQL schema (e.g., `/api/users`).',
        category: 'Databases & Backend-as-a-Service',
        getApiKeyUrl: 'https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING',
    },
    {
        id: 'apple-signin',
        name: 'Sign in with Apple',
        icon: <AppleSignInIcon />,
        description: 'Enable users to sign in to your app with their Apple ID.',
        storageKey: 'silo_integration_apple_signin',
        keys: [{ name: 'serviceId', label: 'Service ID' }],
        usageInstructions: 'Use the Sign in with Apple JS library. The `clientId` in your configuration should be `{{serviceId}}`.',
        category: 'Apple Services',
        getApiKeyUrl: 'https://developer.apple.com/help/account/configure-app-capabilities/configure-sign-in-with-apple-for-the-web',
    },
    {
        id: 'apple-mapkit',
        name: 'MapKit JS',
        icon: <AppleMapKitIcon />,
        description: 'Embed interactive maps with annotations and overlays.',
        storageKey: 'silo_integration_apple_mapkit',
        keys: [{ name: 'authToken', label: 'JWT Auth Token' }],
        usageInstructions: 'Use MapKit JS. When initializing the map, provide the authorization callback that returns your token `{{authToken}}`.',
        category: 'Apple Services',
        getApiKeyUrl: 'https://developer.apple.com/documentation/mapkitjs/creating_and_using_a_mapkit_js_key',
    },
    {
        id: 'apple-music',
        name: 'Apple Music',
        icon: <AppleMusicIcon />,
        description: 'Access Apple Music content and control playback.',
        storageKey: 'silo_integration_apple_music',
        keys: [{ name: 'developerToken', label: 'Developer Token (JWT)' }],
        usageInstructions: 'Use MusicKit JS. Configure it with your developer token `{{developerToken}}`.',
        category: 'Apple Services',
    },
];

// FIX: Export a combined list of all integrations as `ALL_INTEGRATIONS`.
export const ALL_INTEGRATIONS: Integration[] = [
    ...INTEGRATION_DEFINITIONS,
    ...BROWSER_API_DEFINITIONS,
];
