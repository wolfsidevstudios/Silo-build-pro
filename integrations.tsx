import React from 'react';
import { YouTubeIcon, OpenAIIcon, SpotifyIcon, StripeIcon, GitHubIcon, PayPalIcon, PinterestIcon, ProductHuntIcon, TwilioIcon, DiscordIcon, XIcon, SendGridIcon, OpenWeatherIcon, PexelsIcon, UnsplashIcon, NotionIcon, AirtableIcon, ShopifyIcon, GiphyIcon, GoogleAnalyticsIcon, GoogleGmailIcon, GoogleCalendarIcon, GooglePayIcon, GoogleAdsenseIcon, GoogleGeminiIcon, AppleSignInIcon, AppleMapKitIcon, AppleMusicIcon, AppleICloudIcon, JasperIcon, RunwayIcon, UberIcon, TikTokIcon, VenmoIcon, RedditIcon, SoundCloudIcon, KofiIcon, RssIcon, CloudflareIcon, GoogleMapsIcon } from './components/icons';

export interface Integration {
    id: string;
    name: string;
    icon: React.ReactNode;
    description: string;
    storageKey?: string;
    keys?: { name: string; label: string }[];
    usageInstructions?: string;
    category?: string;
    prompt?: string;
    getApiKeyUrl?: string;
}

export const BROWSER_API_DEFINITIONS: Integration[] = [
    {
        id: 'geolocation',
        name: 'Geolocation API',
        icon: <span className="material-symbols-outlined text-4xl text-blue-500">location_on</span>,
        description: "Access the user's location for location-aware features.",
        prompt: "Build an app that asks for location permission and then displays the user's current latitude and longitude.",
        category: 'Browser APIs'
    },
    {
        id: 'camera',
        name: 'Camera (getUserMedia)',
        icon: <span className="material-symbols-outlined text-4xl text-red-500">photo_camera</span>,
        description: 'Capture video and images directly from the device camera.',
        prompt: 'Create a photobooth app. Show the live camera feed on the page and include a button to capture a photo and display it below the feed.',
        category: 'Browser APIs'
    },
    {
        id: 'speech-recognition',
        name: 'Speech Recognition',
        icon: <span className="material-symbols-outlined text-4xl text-purple-500">mic</span>,
        description: 'Transcribe spoken words into text using the Web Speech API.',
        prompt: 'Build a voice note app. It should have a "Start Listening" button that transcribes speech to text in a text area, and a "Stop Listening" button.',
        category: 'Browser APIs'
    },
    {
        id: 'speech-synthesis',
        name: 'Speech Synthesis',
        icon: <span className="material-symbols-outlined text-4xl text-green-500">volume_up</span>,
        description: 'Convert text into spoken voice with the Web Speech API.',
        prompt: 'Create a text-to-speech app with a textarea and a "Speak" button. When the button is clicked, the app should read the text from the textarea aloud.',
        category: 'Browser APIs'
    },
    {
        id: 'fullscreen',
        name: 'Fullscreen API',
        icon: <span className="material-symbols-outlined text-4xl text-gray-700">fullscreen</span>,
        description: 'Allow users to view a specific element in fullscreen mode.',
        prompt: "Build a simple image viewer with an 'Enter Fullscreen' button. When clicked, the image should take up the entire screen.",
        category: 'Browser APIs'
    },
    {
        id: 'clipboard',
        name: 'Clipboard API',
        icon: <span className="material-symbols-outlined text-4xl text-yellow-600">content_paste</span>,
        description: 'Securely copy text and other data to the user clipboard.',
        prompt: 'Create a component with a text input and a "Copy" button. When the button is clicked, the text from the input should be copied to the clipboard.',
        category: 'Browser APIs'
    },
    {
        id: 'web-share',
        name: 'Web Share API',
        icon: <span className="material-symbols-outlined text-4xl text-indigo-500">share</span>,
        description: 'Enable native sharing capabilities on supported devices.',
        prompt: 'Create a simple article page with a title, some text, and a "Share" button. Clicking the button should open the native device sharing UI.',
        category: 'Browser APIs'
    },
    {
        id: 'vibration',
        name: 'Vibration API',
        icon: <span className="material-symbols-outlined text-4xl text-teal-500">vibration</span>,
        description: 'Provide physical feedback through device vibration (mobile only).',
        prompt: 'Build a set of buttons that trigger different vibration patterns when clicked: a short buzz, a long buzz, and a "mario" sequence.',
        category: 'Browser APIs'
    }
];

export const INTEGRATION_DEFINITIONS: Integration[] = [
    {
        id: 'neon',
        name: 'Neon',
        icon: <span className="material-symbols-outlined text-4xl text-cyan-500">database</span>,
        description: 'Connect to a serverless, scalable PostgreSQL database from Neon.',
        storageKey: 'silo_integration_neon',
        keys: [{ name: 'connectionString', label: 'Neon Connection String' }],
        usageInstructions: 'The application is connected to a Neon serverless Postgres database. The connection string is `{{connectionString}}`. For frontend code, assume a backend API exists that uses this connection string to connect to the database. Make `fetch` requests to hypothetical API endpoints corresponding to the SQL schema (e.g., `/api/users`).',
        category: 'Databases',
        getApiKeyUrl: 'https://neon.tech/docs/connect/connect-from-any-app#find-your-connection-string',
    },
    {
        id: 'apple-signin',
        name: 'Sign in with Apple',
        icon: <AppleSignInIcon />,
        description: 'Enable users to sign in to your app with their Apple ID.',
        storageKey: 'silo_integration_apple_signin',
        keys: [{ name: 'serviceId', label: 'Service ID' }],
        usageInstructions: 'Use the Sign in with Apple JS library. The `clientId` in your configuration should be `{{serviceId}}`.',
        category: 'Apple Services',
        getApiKeyUrl: 'https://developer.apple.com/help/account/configure-app-capabilities/configure-sign-in-with-apple-for-the-web',
    },
    {
        id: 'apple-mapkit',
        name: 'MapKit JS',
        icon: <AppleMapKitIcon />,
        description: 'Embed interactive maps with annotations and overlays.',
        storageKey: 'silo_integration_apple_mapkit',
        keys: [{ name: 'authToken', label: 'JWT Auth Token' }],
        usageInstructions: 'Use MapKit JS. When initializing the map, provide the authorization callback that returns your token `{{authToken}}`.',
        category: 'Apple Services',
        getApiKeyUrl: 'https://developer.apple.com/documentation/mapkitjs/creating_and_using_a_mapkit_js_key',
    },
    {
        id: 'apple-music',
        name: 'Apple Music',
        icon: <AppleMusicIcon />,
        description: 'Access Apple Music content and control playback.',
        storageKey: 'silo_integration_apple_music',
        keys: [{ name: 'developerToken', label: 'Developer Token (JWT)' }],
        usageInstructions: 'Use MusicKit JS. Configure it with your developer token `{{developerToken}}`.',
        category: 'Apple Services',
        getApiKeyUrl: 'https://developer.apple.com/documentation/applemusicapi/getting_keys_and_creating_tokens',
    },
    {
        id: 'apple-icloud',
        name: 'iCloud (CloudKit)',
        icon: <AppleICloudIcon />,
        description: 'Store and sync app data across user devices with CloudKit.',
        storageKey: 'silo_integration_apple_icloud',
        keys: [{ name: 'apiToken', label: 'CloudKit API Token' }, { name: 'containerId', label: 'Container Identifier' }],
        usageInstructions: 'Use CloudKit JS. Configure it with your container identifier `{{containerId}}` and API token `{{apiToken}}`.',
        category: 'Apple Services',
        getApiKeyUrl: 'https://developer.apple.com/documentation/cloudkitjs/setting_up_cloudkit_js',
    },
    {
        id: 'youtube',
        name: 'YouTube',
        icon: <YouTubeIcon />,
        description: 'Build apps that can search videos, manage playlists, and more.',
        storageKey: 'silo_integration_youtube',
        keys: [{ name: 'apiKey', label: 'YouTube Data API Key v3' }],
        usageInstructions: 'Use the YouTube Data API v3. The endpoint is `https://www.googleapis.com/youtube/v3/`. Append `&key={{apiKey}}` to your requests for authentication.',
        category: 'Google Services',
        getApiKeyUrl: 'https://console.cloud.google.com/apis/credentials',
    },
    {
        id: 'google-analytics',
        name: 'Google Analytics',
        icon: <GoogleAnalyticsIcon />,
        description: 'Integrate analytics to track user interactions and traffic.',
        storageKey: 'silo_integration_google_analytics',
        keys: [{ name: 'measurementId', label: 'Measurement ID (G-)' }],
        usageInstructions: 'Use the Google Analytics Data API or gtag.js. The Measurement ID `{{measurementId}}` is used to send data to your property.',
        category: 'Google Services',
        getApiKeyUrl: 'https://support.google.com/analytics/answer/9539598',
    },
    {
        id: 'google-gmail',
        name: 'Google Gmail',
        icon: <GoogleGmailIcon />,
        description: 'Read, send, and manage emails through the Gmail API.',
        storageKey: 'silo_integration_google_gmail',
        keys: [{ name: 'apiKey', label: 'Gmail API Key' }, { name: 'clientId', label: 'OAuth 2.0 Client ID' }],
        usageInstructions: 'Use the Gmail API. Requires an OAuth 2.0 flow with your Client ID `{{clientId}}` to get user consent and an access token.',
        category: 'Google Services',
        getApiKeyUrl: 'https://console.cloud.google.com/apis/credentials',
    },
    {
        id: 'google-calendar',
        name: 'Google Calendar',
        icon: <GoogleCalendarIcon />,
        description: 'Integrate event scheduling and calendar management.',
        storageKey: 'silo_integration_google_calendar',
        keys: [{ name: 'apiKey', label: 'Calendar API Key' }, { name: 'clientId', label: 'OAuth 2.0 Client ID' }],
        usageInstructions: 'Use the Google Calendar API. Requires an OAuth 2.0 flow with your Client ID `{{clientId}}` to get user consent and an access token.',
        category: 'Google Services',
        getApiKeyUrl: 'https://console.cloud.google.com/apis/credentials',
    },
     {
        id: 'google-maps',
        name: 'Google Maps',
        icon: <GoogleMapsIcon />,
        description: 'Embed maps and use geolocation, directions, and places data.',
        storageKey: 'silo_integration_google_maps',
        keys: [{ name: 'apiKey', label: 'Google Maps API Key' }],
        usageInstructions: "Use the Google Maps JavaScript API. Include the script with your API key: `<script src=\"https://maps.googleapis.com/maps/api/js?key={{apiKey}}\"></script>`.",
        category: 'Google Services',
        getApiKeyUrl: 'https://console.cloud.google.com/google/maps-apis/credentials',
    },
    {
        id: 'google-pay',
        name: 'Google Pay',
        icon: <GooglePayIcon />,
        description: 'Enable fast, simple, and secure payments in your app.',
        storageKey: 'silo_integration_google_pay',
        keys: [{ name: 'merchantId', label: 'Google Pay Merchant ID' }],
        usageInstructions: 'Use the Google Pay API for web. Use the Merchant ID `{{merchantId}}` when configuring your payment requests.',
        category: 'Google Services',
        getApiKeyUrl: 'https://pay.google.com/business/console',
    },
    {
        id: 'google-adsense',
        name: 'Google AdSense',
        icon: <GoogleAdsenseIcon />,
        description: 'Monetize your application by displaying ads from Google.',
        storageKey: 'silo_integration_google_adsense',
        keys: [{ name: 'publisherId', label: 'AdSense Publisher ID (pub-)' }],
        usageInstructions: 'Use the Google AdSense code snippet with your Publisher ID `{{publisherId}}` to display ads.',
        category: 'Google Services',
        getApiKeyUrl: 'https://support.google.com/adsense/answer/105516',
    },
    {
        id: 'google-gemini',
        name: 'Google Gemini',
        icon: <GoogleGeminiIcon />,
        description: 'Integrate powerful generative AI models for various tasks.',
        storageKey: 'silo_integration_google_gemini',
        keys: [{ name: 'apiKey', label: 'Gemini API Key' }],
        usageInstructions: 'Use the Google AI SDK. Authenticate your requests with the API Key `{{apiKey}}`.',
        category: 'Google Services',
        getApiKeyUrl: 'https://aistudio.google.com/app/apikey',
    },
    {
        id: 'openai',
        name: 'OpenAI',
        icon: <OpenAIIcon />,
        description: 'Integrate ChatGPT and other OpenAI models into your applications.',
        storageKey: 'silo_integration_openai',
        keys: [{ name: 'apiKey', label: 'OpenAI API Key' }],
        usageInstructions: 'Use the OpenAI API. The endpoint is `https://api.openai.com/v1/`. Use the token in the `Authorization: Bearer {{apiKey}}` header.',
        category: 'AI & Developer Tools',
        getApiKeyUrl: 'https://platform.openai.com/api-keys',
    },
    {
        id: 'github',
        name: 'GitHub',
        icon: <GitHubIcon />,
        description: 'Interact with repositories, users, and issues on GitHub.',
        storageKey: 'silo_integration_github',
        keys: [{ name: 'pat', label: 'GitHub Personal Access Token' }],
        usageInstructions: 'Use the GitHub REST API. The endpoint is `https://api.github.com/`. Authenticate using the `Authorization: Bearer {{pat}}` header.',
        category: 'AI & Developer Tools',
        getApiKeyUrl: 'https://github.com/settings/tokens',
    },
    {
        id: 'hailuo-ai',
        name: 'Hailuo AI',
        icon: <img src="https://static.cdnlogo.com/logos/h/3/hailuo-ai_800.png" alt="Hailuo AI Logo" className="w-full h-full object-contain" />,
        description: 'Access to Tongyi Qwen large language models from Alibaba Cloud.',
        storageKey: 'silo_integration_hailuo',
        keys: [{ name: 'apiKey', label: 'Hailuo AI API Key' }],
        usageInstructions: 'Use the Hailuo AI API. Authenticate using the `Authorization: Bearer {{apiKey}}` header.',
        category: 'AI & Developer Tools',
        getApiKeyUrl: 'https://www.alibabacloud.com/product/model-studio',
    },
    {
        id: 'jasper',
        name: 'Jasper',
        icon: <JasperIcon />,
        description: 'AI content platform for marketing, writing, and creative work.',
        storageKey: 'silo_integration_jasper',
        keys: [{ name: 'apiKey', label: 'Jasper API Key' }],
        usageInstructions: 'Use the Jasper REST API. Authenticate using the `Authorization: Bearer {{apiKey}}` header.',
        category: 'AI & Developer Tools',
        getApiKeyUrl: 'https://app.jasper.ai/settings/api',
    },
    {
        id: 'runway',
        name: 'Runway',
        icon: <RunwayIcon />,
        description: 'Generate and edit videos with AI, from text-to-video to style transfer.',
        storageKey: 'silo_integration_runway',
        keys: [{ name: 'apiKey', label: 'Runway API Key' }],
        usageInstructions: 'Use the RunwayML API. Authenticate using the `Authorization: Bearer {{apiKey}}` header.',
        category: 'AI & Developer Tools',
        getApiKeyUrl: 'https://app.runwayml.com/account/api-tokens',
    },
    {
        id: 'anthropic',
        name: 'Anthropic',
        icon: <img src="https://static.cdnlogo.com/logos/a/69/anthropic_800x800.png" alt="Anthropic Logo" className="w-full h-full object-contain" />,
        description: 'Integrate the Claude family of models for powerful text generation and analysis.',
        storageKey: 'silo_integration_anthropic',
        keys: [{ name: 'apiKey', label: 'Anthropic API Key' }],
        usageInstructions: 'Use the Anthropic API. The endpoint is `https://api.anthropic.com/v1/`. Authenticate using the `x-api-key: {{apiKey}}` header.',
        category: 'AI & Developer Tools',
        getApiKeyUrl: 'https://console.anthropic.com/settings/keys',
    },
    {
        id: 'cloudflare',
        name: 'Cloudflare',
        icon: <CloudflareIcon />,
        description: 'Manage DNS, Workers, and other Cloudflare services via API.',
        storageKey: 'silo_integration_cloudflare',
        keys: [{ name: 'apiToken', label: 'API Token' }],
        usageInstructions: "Use the Cloudflare API v4. The endpoint is `https://api.cloudflare.com/client/v4/`. Authenticate using the `Authorization: Bearer {{apiToken}}` header.",
        category: 'AI & Developer Tools',
        getApiKeyUrl: 'https://dash.cloudflare.com/profile/api-tokens',
    },
    {
        id: 'spotify',
        name: 'Spotify',
        icon: <SpotifyIcon />,
        description: 'Access music data, create playlists, and control playback.',
        storageKey: 'silo_integration_spotify',
        keys: [{ name: 'clientId', label: 'Spotify Client ID' }, { name: 'clientSecret', label: 'Spotify Client Secret' }],
        usageInstructions: 'Use the Spotify Web API. You will need to perform an OAuth flow or use the Client Credentials flow with your Client ID `{{clientId}}` and Client Secret `{{clientSecret}}` to get an access token.',
        category: 'Social & Content',
        getApiKeyUrl: 'https://developer.spotify.com/dashboard',
    },
     {
        id: 'x_twitter',
        name: 'X (Twitter)',
        icon: <XIcon />,
        description: 'Integrate with the X API to post tweets, fetch timelines, and more.',
        storageKey: 'silo_integration_x_twitter',
        keys: [
            { name: 'apiKey', label: 'API Key' },
            { name: 'apiSecretKey', label: 'API Secret Key' },
            { name: 'bearerToken', label: 'Bearer Token' }
        ],
        usageInstructions: 'Use the X API v2. For app-only authentication, use the Bearer Token `{{bearerToken}}` in the header: `Authorization: Bearer {{bearerToken}}`. The API Key and Secret are for user-based OAuth flows.',
        category: 'Social & Content',
        getApiKeyUrl: 'https://developer.twitter.com/en/portal/dashboard',
    },
    {
        id: 'discord',
        name: 'Discord',
        icon: <DiscordIcon />,
        description: 'Create Discord bots to interact with servers and users.',
        storageKey: 'silo_integration_discord',
        keys: [{ name: 'botToken', label: 'Discord Bot Token' }],
        usageInstructions: 'Use the Discord API. Authenticate requests with the bot token in the header: `Authorization: Bot {{botToken}}`.',
        category: 'Social & Content',
        getApiKeyUrl: 'https://discord.com/developers/applications',
    },
    {
        id: 'pinterest',
        name: 'Pinterest',
        icon: <PinterestIcon />,
        description: 'Access and manage pins, boards, and user data.',
        storageKey: 'silo_integration_pinterest',
        keys: [{ name: 'accessToken', label: 'Pinterest Access Token' }],
        usageInstructions: 'Use the Pinterest API v5. The endpoint is `https://api.pinterest.com/v5/`. Authenticate using the `Authorization: Bearer {{accessToken}}` header.',
        category: 'Social & Content',
        getApiKeyUrl: 'https://developers.pinterest.com/apps/',
    },
    {
        id: 'giphy',
        name: 'GIPHY',
        icon: <GiphyIcon />,
        description: "Access the world's largest library of animated GIFs and stickers.",
        storageKey: 'silo_integration_giphy',
        keys: [{ name: 'apiKey', label: 'GIPHY API Key' }],
        usageInstructions: "Use the GIPHY API. The endpoint is `https://api.giphy.com/v1/`. Append `&api_key={{apiKey}}` to your requests for authentication.",
        category: 'Social & Content',
        getApiKeyUrl: 'https://developers.giphy.com/dashboard/',
    },
    {
        id: 'reddit',
        name: 'Reddit',
        icon: <RedditIcon />,
        description: "Fetch data from subreddits, posts, and users.",
        storageKey: 'silo_integration_reddit',
        keys: [{ name: 'clientId', label: 'Client ID' }, { name: 'clientSecret', label: 'Client Secret' }],
        usageInstructions: "Use the Reddit API. Requires an OAuth 2.0 flow with your Client ID `{{clientId}}` to get user consent and an access token.",
        category: 'Social & Content',
        getApiKeyUrl: 'https://www.reddit.com/prefs/apps',
    },
    {
        id: 'soundcloud',
        name: 'SoundCloud',
        icon: <SoundCloudIcon />,
        description: "Integrate audio streaming and access SoundCloud's music library.",
        storageKey: 'silo_integration_soundcloud',
        keys: [{ name: 'clientId', label: 'Client ID' }],
        usageInstructions: "Use the SoundCloud API. Authenticate your requests by appending `?client_id={{clientId}}` to API endpoints.",
        category: 'Social & Content',
        getApiKeyUrl: 'https://developers.soundcloud.com/',
    },
     {
        id: 'tiktok',
        name: 'TikTok',
        icon: <TikTokIcon />,
        description: 'Access TikTok content, user data, and embed videos.',
        storageKey: 'silo_integration_tiktok',
        keys: [{ name: 'clientKey', label: 'Client Key' }, { name: 'clientSecret', label: 'Client Secret' }],
        usageInstructions: "Use the TikTok API. Requires an OAuth 2.0 flow with your Client Key `{{clientKey}}` to get user consent and an access token.",
        category: 'Social & Content',
        getApiKeyUrl: 'https://developers.tiktok.com/',
    },
    {
        id: 'stripe',
        name: 'Stripe',
        icon: <StripeIcon />,
        description: 'Build payment and e-commerce functionalities into your apps.',
        storageKey: 'silo_integration_stripe',
        keys: [{ name: 'publicKey', label: 'Stripe Public Key' }, { name: 'secretKey', label: 'Stripe Secret Key' }],
        usageInstructions: 'For frontend code, use the Public Key `{{publicKey}}` to initialize Stripe.js. The Secret Key `{{secretKey}}` is for backend operations and should not be exposed in frontend code; assume a backend exists that uses it.',
        category: 'Payments & E-commerce',
        getApiKeyUrl: 'https://dashboard.stripe.com/apikeys',
    },
    {
        id: 'paypal',
        name: 'PayPal',
        icon: <PayPalIcon />,
        description: 'Integrate PayPal for payments and checkouts.',
        storageKey: 'silo_integration_paypal',
        keys: [{ name: 'clientId', label: 'PayPal Client ID' }],
        usageInstructions: 'Use the PayPal JavaScript SDK. Initialize it by adding the script: `<script src="https://www.paypal.com/sdk/js?client-id={{clientId}}"></script>`. Then render the PayPal buttons.',
        category: 'Payments & E-commerce',
        getApiKeyUrl: 'https://developer.paypal.com/dashboard/applications/',
    },
    {
        id: 'shopify',
        name: 'Shopify',
        icon: <ShopifyIcon />,
        description: 'Build custom storefronts and manage store data.',
        storageKey: 'silo_integration_shopify',
        keys: [{ name: 'storefrontAccessToken', label: 'Storefront Access Token' }, { name: 'storeDomain', label: 'Store Domain (e.g., your-store.myshopify.com)' }],
        usageInstructions: 'Use the Shopify Storefront GraphQL API. The endpoint is `https://{{storeDomain}}/api/2023-10/graphql.json`. Authenticate using the `X-Shopify-Storefront-Access-Token: {{storefrontAccessToken}}` header.',
        category: 'Payments & E-commerce',
        getApiKeyUrl: 'https://shopify.dev/docs/apps/auth/admin-api-access-tokens',
    },
    {
        id: 'kofi',
        name: 'Ko-fi',
        icon: <KofiIcon />,
        description: 'Add a Ko-fi button for donations and creator support.',
        storageKey: 'silo_integration_kofi',
        keys: [{ name: 'username', label: 'Ko-fi Username' }],
        usageInstructions: "Create a Ko-fi donation link using the format `https://ko-fi.com/{{username}}`. This can be used for donation buttons.",
        category: 'Payments & E-commerce',
        getApiKeyUrl: 'https://ko-fi.com/',
    },
     {
        id: 'venmo',
        name: 'Venmo',
        icon: <VenmoIcon />,
        description: 'Add Venmo for peer-to-peer payments or donation buttons.',
        storageKey: 'silo_integration_venmo',
        keys: [{ name: 'username', label: 'Venmo Username' }],
        usageInstructions: "Create a Venmo payment link using the format `https://venmo.com/{{username}}`. This can be used for donation buttons or simple payments.",
        category: 'Payments & E-commerce',
        getApiKeyUrl: 'https://venmo.com/',
    },
    {
        id: 'producthunt',
        name: 'Product Hunt',
        icon: <ProductHuntIcon />,
        description: 'Fetch data about the latest tech products and startups.',
        storageKey: 'silo_integration_producthunt',
        keys: [{ name: 'developerToken', label: 'Product Hunt Developer Token' }],
        usageInstructions: "Use the Product Hunt API v2 (GraphQL). The endpoint is `https://api.producthunt.com/v2/api/graphql`. When making requests, include the token in the 'Authorization' header like this: `Authorization: Bearer {{developerToken}}`.",
        category: 'Business',
        getApiKeyUrl: 'https://www.producthunt.com/v2/oauth/applications',
    },
    {
        id: 'twilio',
        name: 'Twilio',
        icon: <TwilioIcon />,
        description: 'Build apps with SMS, voice, and video capabilities.',
        storageKey: 'silo_integration_twilio',
        keys: [{ name: 'accountSid', label: 'Twilio Account SID' }, { name: 'authToken', label: 'Twilio Auth Token' }],
        usageInstructions: 'Use the Twilio REST API. The Account SID is `{{accountSid}}`. The Auth Token `{{authToken}}` is secret and should be used on a backend; assume a backend exists that uses it for authenticated requests.',
        category: 'Communication',
        getApiKeyUrl: 'https://www.twilio.com/console',
    },
    {
        id: 'sendgrid',
        name: 'SendGrid',
        icon: <SendGridIcon />,
        description: 'Add reliable email delivery for notifications and marketing.',
        storageKey: 'silo_integration_sendgrid',
        keys: [{ name: 'apiKey', label: 'SendGrid API Key' }],
        usageInstructions: 'Use the SendGrid Mail Send API. The endpoint is `https://api.sendgrid.com/v3/mail/send`. Authenticate using the `Authorization: Bearer {{apiKey}}` header.',
        category: 'Communication',
        getApiKeyUrl: 'https://app.sendgrid.com/settings/api_keys',
    },
    {
        id: 'openweather',
        name: 'OpenWeather',
        icon: <OpenWeatherIcon />,
        description: 'Integrate real-time and forecasted weather data into your apps.',
        storageKey: 'silo_integration_openweather',
        keys: [{ name: 'apiKey', label: 'OpenWeather API Key' }],
        usageInstructions: 'Use the OpenWeather One Call API 3.0. The endpoint is `https://api.openweathermap.org/data/3.0/onecall`. Append `&appid={{apiKey}}` to your requests.',
        category: 'Data & Media',
        getApiKeyUrl: 'https://home.openweathermap.org/api_keys',
    },
    {
        id: 'pexels',
        name: 'Pexels',
        icon: <PexelsIcon />,
        description: 'Access a vast library of free, high-quality stock photos and videos.',
        storageKey: 'silo_integration_pexels',
        keys: [{ name: 'apiKey', label: 'Pexels API Key' }],
        usageInstructions: 'Use the Pexels API. The endpoint is `https://api.pexels.com/v1/`. Authenticate using the `Authorization: {{apiKey}}` header.',
        category: 'Data & Media',
        getApiKeyUrl: 'https://www.pexels.com/api/',
    },
    {
        id: 'unsplash',
        name: 'Unsplash',
        icon: <UnsplashIcon />,
        description: "Integrate beautiful, free images from the world's leading photo community.",
        storageKey: 'silo_integration_unsplash',
        keys: [{ name: 'accessKey', label: 'Unsplash Access Key' }],
        usageInstructions: 'Use the Unsplash API. The endpoint is `https://api.unsplash.com/`. Authenticate using the `Authorization: Client-ID {{accessKey}}` header.',
        category: 'Data & Media',
        getApiKeyUrl: 'https://unsplash.com/oauth/applications',
    },
    {
        id: 'rss',
        name: 'RSS Feed',
        icon: <RssIcon />,
        description: "Parse and display content from any RSS or Atom feed.",
        prompt: "Build an RSS feed reader. It should have an input for a URL and display the titles and links from the feed.",
        category: 'Data & Media',
    },
    {
        id: 'notion',
        name: 'Notion',
        icon: <NotionIcon />,
        description: 'Read from and write to Notion pages and databases.',
        storageKey: 'silo_integration_notion',
        keys: [{ name: 'apiToken', label: 'Notion Integration Token' }],
        usageInstructions: 'Use the Notion API v1. The endpoint is `https://api.notion.com/v1/`. Authenticate using the `Authorization: Bearer {{apiToken}}` header. You must also include the `Notion-Version: 2022-06-28` header.',
        category: 'Productivity',
        getApiKeyUrl: 'https://www.notion.so/my-integrations',
    },
    {
        id: 'airtable',
        name: 'Airtable',
        icon: <AirtableIcon />,
        description: 'Use flexible, powerful Airtable bases as a backend for your apps.',
        storageKey: 'silo_integration_airtable',
        keys: [{ name: 'personalAccessToken', label: 'Personal Access Token' }, { name: 'baseId', label: 'Base ID' }],
        usageInstructions: 'Use the Airtable API. The endpoint is `https://api.airtable.com/v0/{{baseId}}/`. Authenticate using the `Authorization: Bearer {{personalAccessToken}}` header.',
        category: 'Productivity',
        getApiKeyUrl: 'https://airtable.com/create/tokens',
    },
    {
        id: 'uber',
        name: 'Uber',
        icon: <UberIcon />,
        description: 'Integrate ride requests, trip data, and estimates into your app.',
        storageKey: 'silo_integration_uber',
        keys: [{ name: 'serverToken', label: 'Server Token' }],
        usageInstructions: 'Use the Uber API. The endpoint is `https://api.uber.com/v1/`. Authenticate using the `Authorization: Token {{serverToken}}` header.',
        category: 'Lifestyle & Services',
        getApiKeyUrl: 'https://developer.uber.com/docs/riders/guides/authentication',
    },
];

export const ALL_INTEGRATIONS: Integration[] = [...INTEGRATION_DEFINITIONS, ...BROWSER_API_DEFINITIONS];